# Based on: https://github.com/biomejs/biome/blob/a27b8253b2f0d5e5618e9b26eebaaa5da55ed69a/.github/workflows/beta.yml
# Copyright (c) 2025 Biome Developers and Contributors (MIT License)
name: Beta release Client SDK Generator
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: The version to release

env:
  INPUT_VERSION: ${{ inputs.version }}
  CARGO_TERM_COLOR: always

jobs:
  version:
    name: Generate version
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ env.version }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node.js 22.x
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22

      - name: Set beta version
        run: |
          echo "version=$(node packages/@portone/client-sdk-generator/scripts/update-beta-version.js)" >> $GITHUB_ENV

  build:
    needs: version
    strategy:
      matrix:
        include:
          - os: windows-2025
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-2025
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            code-target: linux-x64-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            code-target: linux-arm64-musl
          - os: macos-14
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-14
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}

    env:
      version: ${{ needs.version.outputs.version }}
    outputs:
      version: ${{ env.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Install musl toolchain
        if: matrix.code-target == 'linux-x64-musl' || matrix.code-target == 'linux-arm64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cargo-audit
        uses: taiki-e/install-action@9ba3ac3fd006a70c6e186a683577abc1ccf0ff3a # v2.54.0
        if: matrix.code-target == 'linux-x64-musl'
        with:
          tool: cargo-audit

      - name: Audit crates.io dependencies
        if: matrix.code-target == 'linux-x64-musl'
        run: cargo audit

      # Build the Client SDK Generator binary
      - name: Build binaries
        run: cargo build -p client_sdk_generator --release --target ${{ matrix.target }}
        env:
          # Strip all debug symbols from the resulting binaries
          RUSTFLAGS: "-C strip=symbols -C codegen-units=1"

      # Copy the Client SDK Generator binary and rename it to include the name of the target platform
      - name: Copy Client SDK Generator binary
        if: matrix.os == 'windows-2025'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/portone-client-sdk-generator.exe ./dist/portone-client-sdk-generator-${{ matrix.code-target }}.exe
      - name: Copy Client SDK Generator binary
        if: matrix.os != 'windows-2025'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/portone-client-sdk-generator ./dist/portone-client-sdk-generator-${{ matrix.code-target }}

      # Upload the Client SDK Generator binary as a build artifact
      - name: Upload Client SDK Generator artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: client-sdk-generator-${{ matrix.target }}
          path: ./dist/portone-client-sdk-generator-*
          if-no-files-found: error

  # Build GNU/Linux binaries in Docker, using Debian 11 (bullseye), to support older versions of glibc.
  build-gnu:
    needs: version
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64

    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}
    container:
      image: rust:1.87.0-bullseye@sha256:af1a29a166198e1295ca667007e95d2e70c866e3928ba9b25f3907035581c39e

    env:
      version: ${{ needs.version.outputs.version }}
    outputs:
      version: ${{ env.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set jemalloc page size for linux-arm64
        if: matrix.code-target == 'linux-arm64'
        run: |
          echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

      # Build the Client SDK Generator binary
      - name: Build binaries
        run: cargo build -p client_sdk_generator --release --target ${{ matrix.target }}
        env:
          # Strip all debug symbols from the resulting binaries
          RUSTFLAGS: "-C strip=symbols -C codegen-units=1"

      # Copy the Client SDK Generator binary and rename it to include the name of the target platform
      - name: Copy Client SDK Generator binary
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/portone-client-sdk-generator ./dist/portone-client-sdk-generator-${{ matrix.code-target }}

      # Upload the Client SDK Generator binary as a build artifact
      - name: Upload Client SDK Generator artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: client-sdk-generator-${{ matrix.target }}
          path: ./dist/portone-client-sdk-generator-*
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-24.04
    needs:
      - build
      - build-gnu
    environment: npm-publish
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download Client SDK Generator artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.6.2
        with:
          pattern: client-sdk-generator-*
          merge-multiple: true
      - name: Install Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set beta version
        run: node packages/@portone/client-sdk-generator/scripts/update-beta-version.js

      - name: Generate npm packages
        run: node packages/@portone/client-sdk-generator/scripts/generate-packages.js

      - name: Publish npm packages as beta
        run: |
          for package in packages/@portone/*; do
            npm publish $package --tag beta --access public --provenance
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release and tag
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Client SDK Generator v${{ needs.build.outputs.version }}
          tag_name: "@portone/client-sdk-generator@${{ needs.build.outputs.version }}"
          draft: false
          prerelease: true
          files: |
            portone-client-sdk-generator-*
          fail_on_unmatched_files: true
          generate_release_notes: true
